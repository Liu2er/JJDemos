// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JJPerson.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "JJPerson.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - JJPersonRoot

@implementation JJPersonRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - JJPersonRoot_FileDescriptor

static GPBFileDescriptor *JJPersonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - BasePerson

@implementation BasePerson

@dynamic userName;

typedef struct BasePerson__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
} BasePerson__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = BasePerson_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BasePerson__storage_, userName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BasePerson class]
                                     rootClass:[JJPersonRoot class]
                                          file:JJPersonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BasePerson__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Person

@implementation Person

@dynamic userName;
@dynamic userAge;
@dynamic snippets;
@dynamic hasBasePersons, basePersons;
@dynamic projects, projects_Count;
@dynamic hasBasePerson, basePerson;
@dynamic corpus;
@dynamic bytesFields;
@dynamic testBool;

typedef struct Person__storage_ {
  uint32_t _has_storage_[1];
  int32_t userAge;
  Person_Corpus corpus;
  NSString *userName;
  NSString *snippets;
  GPBInt32ObjectDictionary *projects;
  BasePerson *basePerson;
  NSData *bytesFields;
  BasePerson *basePersons;
} Person__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = Person_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Person__storage_, userName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userAge",
        .dataTypeSpecific.className = NULL,
        .number = Person_FieldNumber_UserAge,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Person__storage_, userAge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "snippets",
        .dataTypeSpecific.className = NULL,
        .number = Person_FieldNumber_Snippets,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Person__storage_, snippets),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "projects",
        .dataTypeSpecific.className = NULL,
        .number = Person_FieldNumber_Projects,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Person__storage_, projects),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "basePerson",
        .dataTypeSpecific.className = GPBStringifySymbol(BasePerson),
        .number = Person_FieldNumber_BasePerson,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Person__storage_, basePerson),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "corpus",
        .dataTypeSpecific.enumDescFunc = Person_Corpus_EnumDescriptor,
        .number = Person_FieldNumber_Corpus,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Person__storage_, corpus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "bytesFields",
        .dataTypeSpecific.className = NULL,
        .number = Person_FieldNumber_BytesFields,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Person__storage_, bytesFields),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "basePersons",
        .dataTypeSpecific.className = GPBStringifySymbol(BasePerson),
        .number = Person_FieldNumber_BasePersons,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Person__storage_, basePersons),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "testBool",
        .dataTypeSpecific.className = NULL,
        .number = Person_FieldNumber_TestBool,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Person class]
                                     rootClass:[JJPersonRoot class]
                                          file:JJPersonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Person__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\010\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Person_Corpus_RawValue(Person *message) {
  GPBDescriptor *descriptor = [Person descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Person_FieldNumber_Corpus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPerson_Corpus_RawValue(Person *message, int32_t value) {
  GPBDescriptor *descriptor = [Person descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Person_FieldNumber_Corpus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Person_Corpus

GPBEnumDescriptor *Person_Corpus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Universal\000Web\000Images\000Local\000News\000Products"
        "\000Video\000";
    static const int32_t values[] = {
        Person_Corpus_Universal,
        Person_Corpus_Web,
        Person_Corpus_Images,
        Person_Corpus_Local,
        Person_Corpus_News,
        Person_Corpus_Products,
        Person_Corpus_Video,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Person_Corpus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Person_Corpus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Person_Corpus_IsValidValue(int32_t value__) {
  switch (value__) {
    case Person_Corpus_Universal:
    case Person_Corpus_Web:
    case Person_Corpus_Images:
    case Person_Corpus_Local:
    case Person_Corpus_News:
    case Person_Corpus_Products:
    case Person_Corpus_Video:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
